#!/usr/bin/env node

/**
 * Script para ejecutar migraciones de base de datos en producci√≥n
 * Este script ejecuta todas las migraciones de Drizzle que faltan en producci√≥n
 */

import { execSync } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Iniciando migraciones de producci√≥n...');
console.log(`üìÅ Directorio de trabajo: ${__dirname}`);

// Verificar que estamos en el directorio correcto
const dashboardPath = __dirname;

try {
  // Verificar que existe el directorio de migraciones
  const fs = await import('fs');
  const migrationsPath = path.join(dashboardPath, 'drizzle');

  if (!fs.existsSync(migrationsPath)) {
    throw new Error(`Directorio de migraciones no encontrado: ${migrationsPath}`);
  }

  console.log('üìä Verificando migraciones disponibles...');
  const migrationFiles = fs.readdirSync(migrationsPath)
    .filter(file => file.endsWith('.sql'))
    .sort();

  console.log(`üìã Migraciones encontradas: ${migrationFiles.length}`);
  migrationFiles.forEach(file => console.log(`   - ${file}`));

  // Verificar el estado actual de migraciones
  console.log('üìä Verificando estado de migraciones...');
  let journalContent;
  try {
    const journalPath = path.join(dashboardPath, 'drizzle', 'meta', '_journal.json');
    const journalData = fs.readFileSync(journalPath, 'utf8');
    journalContent = JSON.parse(journalData);
    console.log(`üìã Migraciones aplicadas seg√∫n journal: ${journalContent.entries.length}`);
    journalContent.entries.forEach(entry => {
      console.log(`   ‚úÖ ${entry.tag} (${entry.when})`);
    });
  } catch (error) {
    console.log('üìã No se encontr√≥ journal o est√° vac√≠o (primer despliegue)');
    journalContent = { entries: [] };
  }

  // Opci√≥n 1: Usar push (m√°s seguro para producci√≥n)
  console.log('üìä Intentando usar drizzle-kit push (m√°s seguro para producci√≥n existente)...');
  try {
    execSync('npx drizzle-kit push', {
      cwd: dashboardPath,
      stdio: 'inherit',
      env: {
        ...process.env,
        NODE_ENV: 'production'
      }
    });
    console.log('‚úÖ Push completado exitosamente');
  } catch (pushError) {
    console.log('‚ö†Ô∏è Push fall√≥, intentando migrate con --force...');

    // Opci√≥n 2: Usar migrate con force (si push falla)
    try {
      execSync('npx drizzle-kit migrate --force', {
        cwd: dashboardPath,
        stdio: 'inherit',
        env: {
          ...process.env,
          NODE_ENV: 'production'
        }
      });
      console.log('‚úÖ Migrate con force completado exitosamente');
    } catch (migrateError) {
      console.log('‚ùå Migrate tambi√©n fall√≥. Intentando crear solo las tablas faltantes...');

      // Opci√≥n 3: Crear solo la tabla users si no existe
      console.log('üìã Creando tabla users manualmente...');
      const { Client } = await import('pg');

      const client = new Client({
        connectionString: process.env.DATABASE_URL,
      });

      try {
        await client.connect();

        // Verificar si la tabla users existe
        const result = await client.query(`
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name = 'users'
          );
        `);

        if (!result.rows[0].exists) {
          console.log('üìã Creando tabla users...');
          await client.query(`
            CREATE TABLE "users" (
              "id" varchar(255) PRIMARY KEY,
              "name" varchar(255),
              "email" varchar(255) UNIQUE,
              "image" text,
              "walletAddress" varchar(42) UNIQUE,
              "hasPandorasKey" boolean DEFAULT false NOT NULL,
              "kycLevel" varchar(20) DEFAULT 'basic' NOT NULL,
              "kycCompleted" boolean DEFAULT false NOT NULL,
              "kycData" jsonb,
              "connectionCount" integer DEFAULT 1 NOT NULL,
              "lastConnectionAt" timestamp DEFAULT now(),
              "createdAt" timestamp DEFAULT now() NOT NULL
            );
          `);
          console.log('‚úÖ Tabla users creada exitosamente');
        } else {
          console.log('‚úÖ Tabla users ya existe');
        }

        await client.end();
        console.log('‚úÖ Configuraci√≥n b√°sica completada');

      } catch (dbError) {
        console.error('‚ùå Error con conexi√≥n directa a DB:', dbError.message);
        await client.end();
        throw dbError;
      }
    }
  }

  console.log('‚úÖ Migraciones completadas exitosamente');
  console.log('üîÑ La aplicaci√≥n deber√≠a reiniciarse autom√°ticamente');

} catch (error) {
  console.error('‚ùå Error ejecutando migraciones:', error.message);
  console.error('üìã Stack trace:', error.stack);

  if (error.stdout) console.log('üì§ stdout:', error.stdout);
  if (error.stderr) console.log('üì• stderr:', error.stderr);

  process.exit(1);
}
